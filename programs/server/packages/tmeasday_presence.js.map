{"version":3,"file":"/packages/tmeasday:presence.js","sources":["tmeasday:presence/lib/common.js","tmeasday:presence/lib/server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,+C;AACA,6B;AACA,6B;;AAEA,gB;AACA,mC;AACA,4B;;AAEA,wC;AACA,wC;AACA,2B;;AAEA,0B;AACA,uB;AACA,a;;AAEA,oB;AACA,yB;AACA,gE;AACA,sC;;AAEA,2C;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACvBA,qB;;AAEA,2B;AACA,uB;AACA,yB;AACA,E;;AAEA,yB;AACA,wC;AACA,E;;AAEA,2B;AACA,uB;AACA,G;;AAEA,0C;AACA,mD;AACA,2C;;AAEA,kC;AACA,sB;;AAEA,iC;AACA,0D;AACA,0B;AACA,K;AACA,G;;AAEA,gB;AACA,4B;AACA,kC;AACA,2D;AACA,+B;AACA,G;AACA,G;;AAEA,+B;AACA,gD;AACA,mD;AACA,iB;AACA,K;AACA,S","sourcesContent":["Presences = new Meteor.Collection('presences');\n// For backwards compatibilty\nMeteor.presences = Presences;\n\nMeteor.methods({\n  updatePresence: function(state) {\n    check(state, Match.Any);\n\n    var connectionId = this.isSimulation\n      ? Meteor.connection._lastSessionId\n      : this.connection.id;\n\n    // Should never happen\n    if (! connectionId)\n      return;\n\n    var update = {};\n    update.state = state;\n    if (typeof Meteor.userId !== 'undefined' && Meteor.userId())\n      update.userId = Meteor.userId();\n\n    Presences.update(connectionId, update);\n  }\n});\n","var connections = {};\n\nvar expire = function(id) {\n  Presences.remove(id);\n  delete connections[id];\n};\n\nvar tick = function(id) {\n  connections[id].lastSeen = Date.now();\n};\n\nMeteor.startup(function() {\n  Presences.remove({});\n});\n\nMeteor.onConnection(function(connection) {\n  // console.log('connectionId: ' + connection.id);\n  Presences.insert({ _id: connection.id });\n\n  connections[connection.id] = {};\n  tick(connection.id);\n\n  connection.onClose(function() {\n    // console.log('connection closed: ' + connection.id);\n    expire(connection.id);\n  });\n});\n\nMeteor.methods({\n  presenceTick: function() {\n    check(arguments, [Match.Any]);\n    if (this.connection && connections[this.connection.id])\n      tick(this.connection.id);\n  }\n});\n\nMeteor.setInterval(function() {\n  _.each(connections, function(connection, id) {\n    if (connection.lastSeen < (Date.now() - 10000))\n      expire(id);\n  });\n}, 5000);\n"]}