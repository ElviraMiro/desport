{"version":3,"file":"/packages/raix:stubfence.js","sources":["raix:stubfence/util.js","raix:stubfence/nostub.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,mC;;AAEA,U;AACA,+I;;;;;;;;;;;;;;;;;;ACHA,gB;;AAEA,0D;AACA,kB;;AAEA,wB;AACA,c;AACA,gF;AACA,G;;AAEA,mC;AACA,0C;;AAEA,iC;AACA,kB;;AAEA,iB;AACA,gC;;AAEA,mC;AACA,qC;AACA,gD;AACA,Y;AACA,wE;AACA,K;;AAEA,K;;AAEA,8C;AACA,qB;;AAEA,sB;AACA,sC;AACA,wC;AACA,O;;AAEA,mB;AACA,Q;;AAEA,4B;AACA,sC;AACA,qC;AACA,W;AACA,U;AACA,mD;AACA,G;;AAEA,Y;AACA,E;;AAEA,oD;AACA,kB;;AAEA,uC;AACA,kB;AACA,sE;;AAEA,kC;AACA,yB;AACA,kC;AACA,6B;AACA,mC;AACA,mC;AACA,kC;AACA,M;;AAEA,mC;AACA,qD;;AAEA,U;AACA,6E;AACA,G;AACA,E","sourcesContent":["_DDP = Package['ddp'].LivedataTest;\n\nif (!_DDP)\n  throw new Error('Arg! Meteor just broke raix:stubfence! Please report to @raix at github, and he will work his butt off trying to fix this');","var inFence = 0;\n\n_DDP.Connection.prototype.stubFence = function(names, f) {\n  var self = this;\n\n  if (++inFence !== 1) {\n    inFence--;\n    throw new Error('stubFence cannot lock since another stubFence is running');\n  }\n\n  // Take string or array of string\n  if (names === ''+names) names = [names];\n\n  // Carrier for super of methods\n  var supers = {};\n\n  // Store supers\n  _.each(names, function(name) {\n\n    // Check that the method exists\n    if (self._methodHandlers[name]) {\n      supers[name] = self._methodHandlers[name];\n    } else {\n      throw new Error('stubFence could not find method \"' + name + '\"');\n    }\n\n  });\n\n  // Check that we got any supers to stubFence\n  if (names.length) {\n\n    // Remove the stub\n    _.each(supers, function(f, name) {\n      self._methodHandlers[name] = null;\n    });\n\n    // Run the code\n    f();\n\n    // Insert the stub again\n    _.each(supers, function(f, name) {\n      self._methodHandlers[name] = f;\n    });    \n  } else {\n    throw new Error('stubFence, no methods found');\n  }\n\n  inFence--;\n};\n\nMongo.Collection.prototype.stubFence = function(f) {\n  var self = this;\n\n  // Make sure we got a collection name\n  if (!self._name)\n    throw new Error('Dont run stubFence on an annonymous collection');\n\n  // Make sure we got a connection\n  if (self._connection) {\n    // The main collection methods\n    var collectionMethods = [\n      '/' + self._name + '/insert',\n      '/' + self._name + '/remove',\n      '/' + self._name + '/update'\n    ];\n\n    // Run the connection stubFence\n    self._connection.stubFence(collectionMethods, f);\n\n  } else {\n    throw new Error('Dont run stubFence on a collection with no connection');\n  }\n};"]}