{"version":3,"sources":["ground:dictionary/dictionary.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,sC;AACA,kB;;AAEA,qB;;AAEA,yB;AACA,4C;AACA,0B;;AAEA,gB;AACA,E;;AAEA,6B;AACA,kB;AACA,e;AACA,mB;AACA,8E;;AAEA,iB;;AAEA,oB;;AAEA,wB;AACA,mC;AACA,6B;AACA,gC;AACA,uB;AACA,2B;AACA,oB;AACA,sB;AACA,iC;AACA,wB;AACA,mB;AACA,G;;AAEA,E;;AAEA,4C;AACA,kB;AACA,iD;AACA,4B;AACA,gC;AACA,kD;AACA,gC;AACA,4C;AACA,8B;AACA,iC;AACA,8E;AACA,gB;AACA,sC;AACA,Y;AACA,oD;AACA,K;AACA,G;;AAEA,2B;AACA,E;;AAEA,+C;AACA,oC;AACA,W;AACA,yC;AACA,wB;AACA,E;;AAEA,2C;AACA,0B;AACA,mB;AACA,uB;AACA,iB;AACA,iB;AACA,qB;AACA,E;;AAEA,+C;AACA,kB;AACA,yC;AACA,2B;AACA,oB;AACA,2B;AACA,8C;AACA,6D;AACA,sC;AACA,qB;AACA,G;AACA,E;;AAEA,kD;AACA,iD;AACA,E;;AAEA,8C;AACA,0B;AACA,E;;AAEA,8C;AACA,4E;AACA,2E;AACA,kB;AACA,8B;AACA,mC;AACA,U;AACA,8B;AACA,G;AACA,E;;AAEA,+C;AACA,oD;AACA,E;;AAEA,yC;AACA,4B;AACA,E;;AAEA,2C;AACA,mB;AACA,E;;AAEA,4C;AACA,qB;AACA,E","file":"/packages/ground:dictionary.js","sourcesContent":["var _splice = function(array, begin) {\n  var result = [];\n\n  begin = begin || 0;\n\n  // Add the ones we need\n  for (var i = begin; i < array.length; i++)\n    result.push(array[i]);\n\n  return result;\n};\n\nDictionary = function(list) {\n  var self = this;\n  // Dictionary\n  self.lookup = {};\n  self.lookupDate = {}; // Special lookup making sure date lookups are acurate\n\n  self.list = [];\n\n  self.initial = [];\n\n  // If user sets a list\n  if (list instanceof Dictionary) {\n    // Clone the initial list\n    self.initial = list.clone();\n    // We set the clone\n    self.set(list.clone());\n  } else if (list) {\n    // Clone the array\n    self.initial = _splice(list);\n    // Just set the list\n    self.set(list);\n  }\n\n};\n\nDictionary.prototype.add = function(value) {\n  var self = this;\n  // Make sure not to add existing values / words\n  if (!self.exists(value)) {\n    // Add value to keyword list\n    // We return the index - note this can be 0 :)\n    if (value instanceof Date) {\n      var index = this.list.push(value) - 1;\n      // Set the normal lookup\n      this.lookup[value] = index;\n      // Set the value in the date lookup in order not to conflict with number\n      // lookups\n      this.lookupDate[+value] = index;\n    } else {\n      this.lookup[value] = this.list.push(value) -1;\n    }\n  }\n\n  return this.index(value);\n};\n\nDictionary.prototype.addList = function(list) {\n  // Iterate over the list of values\n  if (list)\n    for (var i = 0; i < list.length; i++)\n      this.add(list[i]);\n};\n\nDictionary.prototype.set = function(list) {\n  // Reset the this.lookup\n  this.lookup = {};\n  this.lookupDate = {};\n  this.list = [];\n  // Add the list\n  this.addList(list);\n};\n\nDictionary.prototype.remove = function(value) {\n  var self = this;\n  // Make sure theres something to remove\n  if (self.exists(value)) {\n    var result = [];\n    // copy the this.lookup\n    for (var i = 0; i < this.list.length; i++)\n      if (i !== self.index(value)) result.push(this.list[i]);\n    // Set the new list of this.lookup\n    this.set(result);\n  }\n};\n\nDictionary.prototype.withoutInitial = function() {\n  return _splice(this.list, this.initial.length);\n};\n\nDictionary.prototype.value = function(index) {\n  return this.list[index];\n};\n\nDictionary.prototype.index = function(value) {\n  // We have to use the Date lookup in order to get the correct lookup value\n  // otherwise there are some slight diviation in the result - We want this\n  // 100% accurate\n  if (value instanceof Date) {\n    return this.lookupDate[+value];\n  } else {\n    return this.lookup[value];\n  }\n};\n\nDictionary.prototype.exists = function(value) {\n  return (typeof this.index(value) !== 'undefined');\n};\n\nDictionary.prototype.clone = function() {\n  return _splice(this.list);\n};\n\nDictionary.prototype.toArray = function() {\n  return this.list;\n};\n\nDictionary.prototype.toObject = function() {\n  return this.lookup;\n};\n"]}